#此处说明总体要求：
1.易扩展，从两方面来看：1.编译；2.实现；
2.尽可能的自动生成.
3.与语言无关，与下层无关
4.与web无关，普通的本地程序，普通的联网程序的模型也适用。
5.session等为概念，不与web一致。具体合入时要进行封装即可。(具体见９条描述）
6.定出接口，与下层依赖接口.
7.生成的东西与语言无关.
8.类型扩展容易.
9.不建意直接使用session,application字眼来描述，而建意采用peruser,global的xml来描述peruser的结构（即每个用户一份这样的字段）
10.考虑调试，考虑测试
11.建意采用state 做为文档的根节点
12. 事务如何定义，从用户登录上来，至到返回至页面，其间在服务器端的状态变化，认为是一个事务。事务的结束标记为返回页面给用户。 :-)
13. 支持包机制，或者称为工程机制，能像java一样cn.along.xx.state跳转到某一状态
14.$() 为展开式，用于提供取值，或函数调用操作，不支持嵌套的$($()),
15.对于采用函数调用获得取值的，采用$(this.$function(function_name,value,value))的形式进行调用
16.表示出$符号需要用两个$$

<!-- 每个forward只有一份这个,style指定输出的处理方式，依据处理方式的不同可提供不同的参数进行处理,这种可做成插件，支持插入并新建解析。:-)  -->

<!--做有类型的解析均做成插件来完成，这样每个插件发现是自已的就去做解析，并
    生成相应的数据，添加对此语法树节点的生成函数回调 -->

<!-- 如何解析
     每个插件以 xpath 方式注册 进入 xml的节点解析，一旦发现此节点，则启用
     相应插件进行解析，
     插件完成： 词法检查
		语法检查
		语义检查
		代码生成
     插件需要在总体中插入总体语义检查回调。
     传入插件处理时，会为插件传入相应的相应节点，父节点，节点描述情况，及全部节点 

     每个插件处理相应回调的顺序可自由指定

    完成插件处理框架，为了方便调试，注意要搞定类型间的处理
-->

<!-- 
      1.要支持session.xml,global.xml,init.xml,table.xml为物殊xml
     统定定义到init.xml中,此xml是系统启动后的第一个状态，为了支持运行，
	容许用户在init.xml之后再指定其它状态为后续状态。

     2.支持destroy.xml为终止状态，任何时候，系统的终止均需要到达此状态后才能关机
	
-->

