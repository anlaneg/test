diff --git a/tool/dweb/condb/src/cn/along/condb/api/SimpleDBAccess.java b/tool/dweb/condb/src/cn/along/condb/api/SimpleDBAccess.java
index 78665eb..243a3a7 100644
--- a/tool/dweb/condb/src/cn/along/condb/api/SimpleDBAccess.java
+++ b/tool/dweb/condb/src/cn/along/condb/api/SimpleDBAccess.java
@@ -82,16 +82,9 @@ public class SimpleDBAccess
 		SimpleDBAccess.getInstance().putConnect(conn);
 		return result;
 	}
+	
 
-	public static int update(String sql, Map<String, String> param)
-			throws DBException
-	{
-		IDBConnect conn = SimpleDBAccess.getInstance().getConnect();
 
-		int ret = conn.update(sql, param);
-		SimpleDBAccess.getInstance().putConnect(conn);
-		return ret;
-	}
 
 	public static <T> ArrayList<T> query(String sql, T param)
 			throws DBException
@@ -102,13 +95,23 @@ public class SimpleDBAccess
 		return result;
 	}
 
-	public static <T1, T2> void loadOne(String sql, T1 result, T2 param)
+	public static <T1,T2> void loadOne(String sql, T1 result,T2 src, Map<String,Object> param)
 			throws DBException
 	{
 		IDBConnect conn = SimpleDBAccess.getInstance().getConnect();
-		conn.queryOne(sql, result, param);
+		conn.queryOne(sql, result,src, param);
 		SimpleDBAccess.getInstance().putConnect(conn);
 	}
+	
+	public static <T1> int update(String sql,Iterator<T1> src, Iterator<Map<String, Object>> param)
+			throws DBException
+	{
+		IDBConnect conn = SimpleDBAccess.getInstance().getConnect();
+
+		int ret = conn.update(sql,src,param);
+		SimpleDBAccess.getInstance().putConnect(conn);
+		return ret;
+	}
 
 	public static <T> int save(String sql, T object) throws DBException
 	{
diff --git a/tool/dweb/condb/src/cn/along/condb/connect/DBConnect.java b/tool/dweb/condb/src/cn/along/condb/connect/DBConnect.java
index 2c45f15..4cc2c64 100644
--- a/tool/dweb/condb/src/cn/along/condb/connect/DBConnect.java
+++ b/tool/dweb/condb/src/cn/along/condb/connect/DBConnect.java
@@ -5,6 +5,7 @@ import java.sql.SQLException;
 import java.util.List;
 import java.util.Map;
 
+import cn.along.condb.api.Iterator;
 import cn.along.condb.exception.DBException;
 import cn.along.condb.inner.IDBConnect;
 
@@ -51,9 +52,9 @@ public class DBConnect implements IDBConnect
 	}
 
 	@Override
-	public int update(String sql, Map<String, String> param) throws DBException
+	public <T1> int update(String sql, Iterator<T1> src,Iterator<Map<String, Object>> param) throws DBException
 	{
-		return new DBUpdate(this.conn).update(sql, param);
+		return new DBUpdate(this.conn).update(sql, src,param);
 	}
 
 	@Override
@@ -93,10 +94,10 @@ public class DBConnect implements IDBConnect
 	}
 
 	@Override
-	public <T1, T2> void queryOne(String sql, T1 result, T2 param)
+	public <T1,T2> void queryOne(String sql, T1 result,T2 src, Map<String,Object> param)
 			throws DBException
 	{
-		new DBQuery(this.conn).queryOne(sql,result,param);
+		new DBQuery(this.conn).queryOne(sql,result,src,param);
 	}
 
 }
diff --git a/tool/dweb/condb/src/cn/along/condb/connect/DBQuery.java b/tool/dweb/condb/src/cn/along/condb/connect/DBQuery.java
index 1f28cac..e502c13 100644
--- a/tool/dweb/condb/src/cn/along/condb/connect/DBQuery.java
+++ b/tool/dweb/condb/src/cn/along/condb/connect/DBQuery.java
@@ -210,11 +210,11 @@ public class DBQuery
 		return this.query(c, ps, false, null);
 	}
 
-	public <T1, T2> void queryOne(String sql, T1 result, T2 param)
+	public <T1,T2> void queryOne(String sql, T1 result,T2 src, Map<String,Object> param)
 			throws DBException
 	{
+		
 		PreparedStatement ps = this.createPreparedStatement(sql, null, param);
-		@SuppressWarnings("unchecked")
 		Class<T1> c = (Class<T1>) result.getClass();
 		this.query(c, ps, true, result);
 	}
diff --git a/tool/dweb/condb/src/cn/along/condb/connect/DBUpdate.java b/tool/dweb/condb/src/cn/along/condb/connect/DBUpdate.java
index 6367e7e..f5db05a 100644
--- a/tool/dweb/condb/src/cn/along/condb/connect/DBUpdate.java
+++ b/tool/dweb/condb/src/cn/along/condb/connect/DBUpdate.java
@@ -3,12 +3,13 @@ package cn.along.condb.connect;
 import java.lang.reflect.InvocationTargetException;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import java.util.HashMap;
+import java.sql.SQLException;
 import java.util.Map;
 import java.util.Vector;
 
 import org.apache.commons.beanutils.PropertyUtils;
 
+import cn.along.condb.api.Iterator;
 import cn.along.condb.exception.DBException;
 
 public class DBUpdate
@@ -20,84 +21,140 @@ public class DBUpdate
 		this.conn = conn;
 	}
 
-	private int update(String sql, Vector<String> paramName,
-			Map<String, ?> param) throws DBException
+	private <T1> int update(String sql, Iterator<T1> src,
+			Vector<String> paramName, Iterator<Map<String, Object>> param)
+			throws DBException
 	{
-		int result = 0;
 		System.err.println("execute sql: " + sql);
+		PreparedStatement ps = null;
 		try
 		{
-			PreparedStatement ps;
+			if (src != null && param != null && src.length() != param.length())
+			{
+				throw new DBException("Invalid parameter");
+			}
+			if (((src == null && param == null) || (src.length() == 0 && param
+					.length() == 0)) && paramName.size() != 0)
+			{
+				throw new DBException("miss parameter");
+			}
+
+			if (paramName.size() == 0)
+			{
+				return this._update_inner(ps, null, null, null);
+			}
+
+			int src_length = 0;
+			iterator<T?
+			if (src != null)
+			{
+				src_length = src.length();
+				
+			}
+
+			int param_length = 0;
+			if (param != null)
+			{
+				param_length = param.length();
+			}
 
-			ps = this.conn.prepareStatement(sql);
+			int max = src_length;
+			if (param_length > max)
+			{
+				max = param_length;
+			}
+
+			for (int i = 0; i < max; ++i)
+			{
+				src_value= null;
+				param_value=null;
+				if(i < src_length)
+				{
+					
+				}
+			}
 
-			// set parameter
-			if (paramName != null && param != null)
+			if (src == null)
 			{
-				for (int i = 0; i < paramName.size(); ++i)
+				Iterator<Map<String, Object>> iter = param.first();
+				int ret = 0;
+				for (int i = 0; i < iter.length(); ++i)
 				{
-					System.err.println("set sql param[" + (i + 1) + "]: (name:"
-							+ paramName.get(i) + ",value:"
-							+ param.get(paramName.get(i)) + ")");
-					ps.setObject(i + 1, param.get(paramName.get(i)));
+					Map<String, Object> p = iter.next();
+					ret += this._update_inner(ps, null, paramName, p);
 				}
+				return ret;
 			}
-			result = ps.executeUpdate();
+			if (param == null)
+			{
 
-			ps.close();
+			}
 
-			return result;
 		}
 		catch (Exception e)
 		{
-			throw new DBException("execute sql: " + sql + " error: "
-					+ e.getMessage());
+			e.printStackTrace();
+			String error = e.getMessage();
+			if (ps != null)
+			{
+				try
+				{
+					ps.close();
+				}
+				catch (SQLException e1)
+				{
+					e1.printStackTrace();
+					error = e1.getMessage();
+				}
+			}
+			throw new DBException("execute sql: " + sql + " error: " + error);
 		}
+	}
 
+	private <T1> int _update_inner(PreparedStatement ps, T1 src,
+			Vector<String> paramName, Map<String, Object> param)
+			throws DBException, SQLException, IllegalAccessException,
+			InvocationTargetException, NoSuchMethodException
+	{
+		int result = 0;
+		// set parameter
+		if (paramName != null)
+		{
+			for (int i = 0; i < paramName.size(); ++i)
+			{
+				// first get param from paramMap
+				String key = paramName.get(i);
+				Object value = param.get(key);
+				if (value == null)
+				{
+					// second get param for 'src'
+					value = PropertyUtils.getProperty(src, key);
+				}
+				ps.setObject(i + 1, value);
+			}
+		}
+		result = ps.executeUpdate();
+		ps.close();
+		return result;
 	}
 
-	public int update(String sql, Map<String, ?> param) throws DBException
+	public <T1> int update(String sql, Iterator<T1> src,
+			Iterator<Map<String, Object>> param) throws DBException
 	{
 		Vector<String> paramName = new Vector<String>(8);
 		sql = DBParameterParse.parseSqlParam(sql, paramName);
-		return this.update(sql, paramName, param);
+		return this.update(sql, src, paramName, param);
 	}
 
 	public int update(String sql) throws DBException
 	{
-		return this.update(sql, null, null);
+		return this.update(sql, null, null, null);
 	}
 
 	public <T> int update(String sql, T in) throws DBException
 	{
-		// 这个方法实现的比较简单，暂如此处理
 		Vector<String> paramName = new Vector<String>(8);
 		sql = DBParameterParse.parseSqlParam(sql, paramName);
-		HashMap<String, Object> param = new HashMap<String, Object>();
-		try
-		{
-			for (int i = 0; i < paramName.size(); ++i)
-			{
-				param.put(paramName.get(i),
-						PropertyUtils.getProperty(in, paramName.get(i)));
-			}
-		}
-		catch(InvocationTargetException e)
-		{
-			e.printStackTrace();
-			throw new DBException(e.getMessage());
-		}
-		catch (NoSuchMethodException e)
-		{
-			e.printStackTrace();
-			throw new DBException(e.getMessage());
-		}
-		catch (IllegalAccessException  e)
-		{
-			e.printStackTrace();
-			throw new DBException(e.getMessage());
-		}
-
-		return this.update(sql, paramName, param);
+		return this.update(sql, in, paramName, null);
 	}
 }
diff --git a/tool/dweb/condb/src/cn/along/condb/inner/IDBConnect.java b/tool/dweb/condb/src/cn/along/condb/inner/IDBConnect.java
index aebc46d..f5a3ad1 100644
--- a/tool/dweb/condb/src/cn/along/condb/inner/IDBConnect.java
+++ b/tool/dweb/condb/src/cn/along/condb/inner/IDBConnect.java
@@ -4,6 +4,7 @@ import java.sql.Connection;
 import java.util.List;
 import java.util.Map;
 
+import cn.along.condb.api.Iterator;
 import cn.along.condb.exception.DBException;
 
 public interface IDBConnect
@@ -16,11 +17,11 @@ public interface IDBConnect
 	
 	public <T> List<T> query(Class<T> c, String sql) throws DBException;
 
-	public <T1, T2> void queryOne(String sql, T1 result, T2 param)
+	public <T1,T2> void queryOne(String sql, T1 result,T2 src, Map<String,Object> param)
 			throws DBException;
 	
 
-	public int update(String sql, Map<String, String> param) throws DBException;
+	public <T1> int update(String sql, Iterator<T1> src,Iterator<Map<String, Object>> param) throws DBException;
 
 	public <T> int update(String sql, T in) throws DBException;
 
diff --git a/tool/dweb/xparse/.classpath b/tool/dweb/xparse/.classpath
index 83b76b7..4fef70f 100644
--- a/tool/dweb/xparse/.classpath
+++ b/tool/dweb/xparse/.classpath
@@ -2,6 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="test"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/condb"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/tool/dweb/xparse/gen/input_1.gen b/tool/dweb/xparse/gen/input_1.gen
deleted file mode 100644
index e69de29..0000000
diff --git a/tool/dweb/xparse/src/cn/along/xgen/struct/XGenStruct.java b/tool/dweb/xparse/src/cn/along/xgen/struct/XGenStruct.java
index f5fb38d..1ccf99d 100644
--- a/tool/dweb/xparse/src/cn/along/xgen/struct/XGenStruct.java
+++ b/tool/dweb/xparse/src/cn/along/xgen/struct/XGenStruct.java
@@ -23,14 +23,14 @@ public class XGenStruct
 	{
 		StringBuilder builder = new StringBuilder();
 		builder.append("public class "
-				+ StringUtil.initialUpper(struct.getName()) + "\n");
+				+ StringUtil.initialUpper(struct.getType()) + "\n");
 		return builder.toString();
 	}
 
 	private static String genClassContructor(XparseStruct struct)
 	{
 		StringBuilder builder = new StringBuilder();
-		builder.append("\tpublic " + StringUtil.initialUpper(struct.getName())
+		builder.append("\tpublic " + StringUtil.initialUpper(struct.getType())
 				+ "()\n");
 		builder.append("\t{\n");
 		builder.append("\t\t//set member default value\n");
diff --git a/tool/dweb/xparse/src/cn/along/xparse/sql/XparseSql.java b/tool/dweb/xparse/src/cn/along/xparse/sql/XparseSql.java
index ecbfbff..4244c1c 100644
--- a/tool/dweb/xparse/src/cn/along/xparse/sql/XparseSql.java
+++ b/tool/dweb/xparse/src/cn/along/xparse/sql/XparseSql.java
@@ -229,14 +229,6 @@ public class XparseSql extends XparseBase
         return builder.toString();
     }
 
-    public String createSqlParameter(String prefix, XparseInput input)
-            throws XgenException
-    {
-        // StringBuilder builder = new StringBuilder();
-        throw new XgenUnSupportException();
-        // return "";
-    }
-
     private String genUpdateFillFunction(XparseInput input,
             IteratorHelper helper)
     {
@@ -255,7 +247,7 @@ public class XparseSql extends XparseBase
                 String name = xparameter.getName();
                 String value = xparameter.getValue();
                 builder.append("param.put(\"" + name + "\"" + ", \"" + value
-                        + "\")\n");
+                        + "\");\n");
             }
         }
         builder.append("SimpleDBAccess.update(sql, this.$0, this.$0,"
@@ -284,7 +276,7 @@ public class XparseSql extends XparseBase
                 String name = xparameter.getName();
                 String value = xparameter.getValue();
                 builder.append("\tparam.put(\"" + name + "\"" + ", \"" + value
-                        + "\")\n");
+                        + "\");\n");
             }
         }
         builder.append("SimpleDBAccess.loadOne(sql, this.$0, this.$0,"
